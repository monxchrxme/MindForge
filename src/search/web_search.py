"""
–í–µ–±-–ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Tavily API (LangChain)
"""

import os
import logging
from typing import List, Dict

logger = logging.getLogger(__name__)


class WebSearchService:
    """–°–µ—Ä–≤–∏—Å –≤–µ–±-–ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ Tavily API"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π Tavily API –∫–ª—é—á–∞"""
        self.tavily_api_key = os.getenv("TAVILY_API_KEY")
        self.search_tool = None
        self.mode = "mock"

        if self.tavily_api_key:
            self._init_tavily()
        else:
            logger.info("WebSearchService: —Ä–µ–∂–∏–º MOCK")
            logger.info("üí° –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: export TAVILY_API_KEY=your_key")
            logger.info("üí° –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á: https://tavily.com/ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ 1000 req/month)")

    def _init_tavily(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Tavily Search"""
        try:
            from langchain_community.tools.tavily_search import TavilySearchResults

            self.search_tool = TavilySearchResults(
                max_results=2,
                search_depth="basic",
                include_answer=False,
                include_raw_content=False,
                include_images=False
            )
            self.mode = "tavily"
            logger.info("‚úì WebSearchService: —Ä–µ–∂–∏–º TAVILY (—Ä–µ–∞–ª—å–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫)")

        except ImportError:
            logger.warning("‚ö†Ô∏è  tavily-python –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: pip install tavily-python")
            self.mode = "mock"
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Tavily: {e}")
            self.mode = "mock"

    def verify_facts(self, facts: List[str], max_results: int = 2) -> Dict[str, any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ –≤–µ–±-–ø–æ–∏—Å–∫

        Args:
            facts: —Å–ø–∏—Å–æ–∫ —Ñ–∞–∫—Ç–æ–≤
            max_results: –º–∞–∫—Å–∏–º—É–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

        Returns:
            —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        verification_results = {
            'verified_facts': [],
            'unverified_facts': [],
            'search_results': []
        }

        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ {len(facts)} —Ñ–∞–∫—Ç–æ–≤ ({self.mode} —Ä–µ–∂–∏–º)...")

        for i, fact in enumerate(facts, 1):
            logger.info(f"   –§–∞–∫—Ç {i}/{len(facts)}: {fact[:60]}...")

            try:
                if self.mode == "tavily":
                    sources = self._search_tavily(fact)
                    is_verified = len(sources) > 0
                else:
                    sources = self._mock_search(fact)
                    is_verified = True

                if is_verified:
                    verification_results['verified_facts'].append(fact)
                    if self.mode == "mock":
                        logger.info(f"      ‚úì –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω (mock)")
                    else:
                        logger.info(f"      ‚úì –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω ({len(sources)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤)")
                else:
                    verification_results['unverified_facts'].append(fact)
                    logger.warning(f"      ‚úó –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π")

                verification_results['search_results'].append({
                    'fact': fact,
                    'verified': is_verified,
                    'sources': sources
                })

            except Exception as e:
                logger.error(f"      –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
                # –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤ mock —Ä–µ–∂–∏–º–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
                if self.mode == "mock":
                    verification_results['verified_facts'].append(fact)
                else:
                    verification_results['unverified_facts'].append(fact)

        verified_count = len(verification_results['verified_facts'])
        logger.info(
            f"‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {verified_count}/{len(facts)} "
            f"—Ñ–∞–∫—Ç–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã ({self.mode})"
        )

        return verification_results

    def _search_tavily(self, query: str) -> List[Dict[str, str]]:
        """–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Tavily API"""
        try:
            # Tavily –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
            raw_results = self.search_tool.invoke({"query": query})

            results = []
            for item in raw_results:
                if isinstance(item, dict):
                    results.append({
                        'title': item.get('title', item.get('name', 'No title'))[:100],
                        'url': item.get('url', ''),
                        'snippet': item.get('content', item.get('snippet', ''))[:200]
                    })

            return results

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Tavily API: {e}")
            return []


