"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è LangGraph Workflow
"""

import os
import logging
from dotenv import load_dotenv
import json

from .langgraph.workflow import QuizGenerationWorkflow

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    # –ü–æ–ª—É—á–∞–µ–º credentials
    gigachat_credentials = os.getenv("GIGACHAT_CREDENTIALS")
    if not gigachat_credentials:
        raise ValueError("GIGACHAT_CREDENTIALS –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Quiz Agent
    quiz_config = {
        "gigachat": {
            "api_key": gigachat_credentials,
            "model": "GigaChat",
            "temperature": 0.7
        },
        "quiz": {
            "num_questions": 7,
            "question_types": [
                "multiple_choice",
                "true_false",
                "short_answer"
            ]
        }
    }

    # –°–æ–∑–¥–∞–µ–º workflow
    workflow = QuizGenerationWorkflow(
        gigachat_credentials=gigachat_credentials,
        quiz_config=quiz_config,
        use_rag=True,  # –í–∫–ª—é—á–∞–µ–º RAG
        enable_web_search=False  # –í–µ–±-–ø–æ–∏—Å–∫ –≤—ã–∫–ª—é—á–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    )

    # –ü—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –ª–µ–∫—Ü–∏–∏
    lecture_text = """
    –ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–∏ - –æ–¥–Ω–æ –∏–∑ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–Ω—è—Ç–∏–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.
    
    –ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–∏ f(x) –≤ —Ç–æ—á–∫–µ x‚ÇÄ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫ –ø—Ä–µ–¥–µ–ª –æ—Ç–Ω–æ—à–µ–Ω–∏—è –ø—Ä–∏—Ä–∞—â–µ–Ω–∏—è 
    —Ñ—É–Ω–∫—Ü–∏–∏ –∫ –ø—Ä–∏—Ä–∞—â–µ–Ω–∏—é –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –ø—Ä–∏ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–∏ –ø—Ä–∏—Ä–∞—â–µ–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∫ –Ω—É–ª—é:
    
    f'(x‚ÇÄ) = lim(Œîx‚Üí0) [f(x‚ÇÄ + Œîx) - f(x‚ÇÄ)] / Œîx
    
    –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π —Å–º—ã—Å–ª –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π: –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –≤ —Ç–æ—á–∫–µ —Ä–∞–≤–Ω–∞ —É–≥–ª–æ–≤–æ–º—É –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—É 
    –∫–∞—Å–∞—Ç–µ–ª—å–Ω–æ–π –∫ –≥—Ä–∞—Ñ–∏–∫—É —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —ç—Ç–æ–π —Ç–æ—á–∫–µ (—Ç–∞–Ω–≥–µ–Ω—Å—É —É–≥–ª–∞ –Ω–∞–∫–ª–æ–Ω–∞).
    
    –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏—è:
    1. –ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã: (C)' = 0
    2. –ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è —Å—Ç–µ–ø–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: (x^n)' = n¬∑x^(n-1)
    3. –ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è —Å—É–º–º—ã: (f + g)' = f' + g'
    4. –ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: (f¬∑g)' = f'¬∑g + f¬∑g'
    5. –ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è —á–∞—Å—Ç–Ω–æ–≥–æ: (f/g)' = (f'¬∑g - f¬∑g') / g¬≤
    
    –§–∏–∑–∏—á–µ—Å–∫–∏–π —Å–º—ã—Å–ª –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π: –µ—Å–ª–∏ s(t) - –ø—É—Ç—å, –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π —Ç–µ–ª–æ–º –∑–∞ –≤—Ä–µ–º—è t,
    —Ç–æ s'(t) - —ç—Ç–æ –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Ç–µ–ª–∞ –≤ –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ t.
    """

    # –ó–∞–ø—É—Å–∫ workflow
    logger.info("–ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–≤–∏–∑–∞...")
    result = workflow.run(lecture_text)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏
    if result.get("error"):
        logger.error(f"Workflow –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {result['error']}")
        return

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n" + "="*70)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print("="*70)

    print(f"\nüìù –ò–ó–í–õ–ï–ß–ï–ù–ù–´–ï –§–ê–ö–¢–´ ({len(result['key_facts'])}):")
    for i, fact in enumerate(result['key_facts'], 1):
        print(f"{i}. {fact}")

    if result.get('quiz_questions'):
        print(f"\n‚ùì –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–ï –í–û–ü–†–û–°–´ ({len(result['quiz_questions'])}):")
        for i, q in enumerate(result['quiz_questions'], 1):
            print(f"\n--- –í–æ–ø—Ä–æ—Å {i} ---")
            print(f"–¢–∏–ø: {q['question_type']}")
            print(f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {q['difficulty']}")
            print(f"–í–æ–ø—Ä–æ—Å: {q['question_text']}")
            if q.get('options'):
                print("–í–∞—Ä–∏–∞–Ω—Ç—ã:")
                for opt in q['options']:
                    print(f"  - {opt}")
            print(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {q['correct_answer']}")
            print(f"–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {q['explanation']}")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    with open("quiz_result.json", "w", encoding="utf-8") as f:
        json.dump({
            "key_facts": result['key_facts'],
            "quiz_questions": result['quiz_questions']
        }, f, ensure_ascii=False, indent=2)

    logger.info("\n‚úì –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ quiz_result.json")


if __name__ == "__main__":
    main()
