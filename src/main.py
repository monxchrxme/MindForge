"""
–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ - LangGraph Workflow —Å CLI
"""

import sys
import os
from pathlib import Path
import argparse

ROOT_DIR = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(ROOT_DIR))

import logging
from dotenv import load_dotenv

from .config_loader import load_config
from .langgraph.workflow import QuizGenerationWorkflow
from .utils.helpers import load_lecture_from_file, format_quiz_results
from .utils.gigachat_client import get_global_token_tracker

load_dotenv()

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('quiz_generation.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å CLI"""

    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    parser = argparse.ArgumentParser(description='–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–≤–∏–∑–∞ –∏–∑ –ª–µ–∫—Ü–∏–∏')
    parser.add_argument('lecture_file', type=str, help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–µ–∫—Ü–∏–∏ (.txt/.md)')
    parser.add_argument('--web-search', action='store_true', help='–í–∫–ª—é—á–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–∫—Ç–æ–≤')
    parser.add_argument('--no-rag', action='store_true', help='–û—Ç–∫–ª—é—á–∏—Ç—å RAG (—Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤)')
    parser.add_argument('--output', type=str, default='quiz_result.json', help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')
    args = parser.parse_args()

    logger.info("="*70)
    logger.info("MINDFORGE QUIZ GENERATOR - LANGGRAPH WORKFLOW")
    logger.info("="*70)

    try:
        # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        logger.info("\n1Ô∏è‚É£  –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        config = load_config()

        gigachat_credentials = os.getenv("GIGACHAT_CREDENTIALS")
        if not gigachat_credentials:
            raise ValueError("GIGACHAT_CREDENTIALS –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

        # 2. –ó–∞–≥—Ä—É–∑–∫–∞ –ª–µ–∫—Ü–∏–∏
        logger.info(f"\n2Ô∏è‚É£  –ó–∞–≥—Ä—É–∑–∫–∞ –ª–µ–∫—Ü–∏–∏: {args.lecture_file}")
        lecture_text = load_lecture_from_file(args.lecture_file)
        logger.info(f"   üìÑ –î–ª–∏–Ω–∞: {len(lecture_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        logger.info(f"   üìù –°–ª–æ–≤: ~{len(lecture_text.split())}")

        # 3. –°–æ–∑–¥–∞–Ω–∏–µ workflow
        logger.info("\n3Ô∏è‚É£  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LangGraph Workflow")
        workflow = QuizGenerationWorkflow(
            gigachat_credentials=gigachat_credentials,
            quiz_config=config,
            use_rag=not args.no_rag,
            enable_web_search=args.web_search
        )

        logger.info(f"   RAG: {'‚úì –í–∫–ª—é—á–µ–Ω' if not args.no_rag else '‚úó –û—Ç–∫–ª—é—á–µ–Ω'}")
        logger.info(f"   –í–µ–±-–ø–æ–∏—Å–∫: {'‚úì –í–∫–ª—é—á–µ–Ω' if args.web_search else '‚úó –û—Ç–∫–ª—é—á–µ–Ω'}")

        # 4. –ó–∞–ø—É—Å–∫ workflow
        logger.info("\n4Ô∏è‚É£  –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–≤–∏–∑–∞...")
        logger.info("-"*70)

        result = workflow.run(lecture_text)

        if result.get("error"):
            logger.error(f"\n‚úó –û—à–∏–±–∫–∞: {result['error']}")
            tracker = get_global_token_tracker()
            tracker.log_summary()
            sys.exit(1)

        # 5. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        logger.info("\n5Ô∏è‚É£  –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        formatted_output = format_quiz_results(result, output_file=args.output)
        print(formatted_output)

        # 6. –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤
        logger.info("\n6Ô∏è‚É£  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤")
        tracker = get_global_token_tracker()
        tracker.log_summary()

        usage = tracker.get_summary()
        print("\n" + "="*70)
        print("üìä –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –¢–û–ö–ï–ù–û–í GIGACHAT API")
        print("="*70)
        print(f"LLM –∑–∞–ø—Ä–æ—Å–æ–≤:         {usage['total_requests']}")
        print(f"  –ü—Ä–æ–º–ø—Ç —Ç–æ–∫–µ–Ω–æ–≤:     {usage['prompt_tokens']:,}")
        print(f"  –û—Ç–≤–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤:      {usage['completion_tokens']:,}")
        print(f"  –ò—Ç–æ–≥–æ LLM:          {usage['total_tokens']:,}")
        print("-"*70)
        print(f"Embedding –∑–∞–ø—Ä–æ—Å–æ–≤:   {usage['embedding_requests']}")
        print(f"  Embedding —Ç–æ–∫–µ–Ω–æ–≤:  {usage['embedding_tokens']:,}")
        print("-"*70)
        print(f"–í–°–ï–ì–û –¢–û–ö–ï–ù–û–í:        {usage['grand_total_tokens']:,}")
        print("="*70)

        # –§–∏–Ω–∞–ª
        logger.info("\n" + "="*70)
        logger.info("‚úì –ì–ï–ù–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û")
        logger.info("="*70)
        logger.info(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {args.output}")
        logger.info(f"üìã –õ–æ–≥–∏: quiz_generation.log")

    except FileNotFoundError as e:
        logger.error(f"\n‚úó –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        sys.exit(1)

    except ValueError as e:
        logger.error(f"\n‚úó –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        sys.exit(1)

    except Exception as e:
        logger.error(f"\n‚úó –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

        try:
            tracker = get_global_token_tracker()
            tracker.log_summary()
        except:
            pass

        sys.exit(1)


if __name__ == "__main__":
    main()
