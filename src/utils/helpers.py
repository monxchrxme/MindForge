"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
"""

from pathlib import Path
from typing import Dict, Any
import json
import logging

logger = logging.getLogger(__name__)


def load_lecture_from_file(file_path: str) -> str:
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ª–µ–∫—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞

    Args:
        file_path: –ø—É—Ç—å –∫ TXT —Ñ–∞–π–ª—É —Å –ª–µ–∫—Ü–∏–µ–π

    Returns:
        —Ç–µ–∫—Å—Ç –ª–µ–∫—Ü–∏–∏
    """
    path = Path(file_path)

    if not path.exists():
        raise FileNotFoundError(f"–§–∞–π–ª –ª–µ–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")

    if not path.suffix.lower() in ['.txt', '.md']:
        raise ValueError(f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .txt –∏ .md —Ñ–∞–π–ª—ã, –ø–æ–ª—É—á–µ–Ω: {path.suffix}")

    with open(path, 'r', encoding='utf-8') as f:
        content = f.read()

    if not content.strip():
        raise ValueError(f"–§–∞–π–ª –ø—É—Å—Ç–æ–π: {file_path}")

    logger.info(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–µ–∫—Ü–∏—è: {file_path} ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤)")
    return content


def format_quiz_results(result: Dict[str, Any], output_file: str = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–≤–∏–∑–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞

    Args:
        result: —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã workflow
        output_file: –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ - –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON

    Returns:
        –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    output = []

    # –§–∞–∫—Ç—ã
    output.append("\n" + "="*70)
    output.append("üìù –ò–ó–í–õ–ï–ß–ï–ù–ù–´–ï –ö–õ–Æ–ß–ï–í–´–ï –§–ê–ö–¢–´")
    output.append("="*70)

    for i, fact in enumerate(result.get('key_facts', []), 1):
        output.append(f"\n{i}. {fact}")

    # –í–æ–ø—Ä–æ—Å—ã –∫–≤–∏–∑–∞
    if result.get('quiz_questions'):
        output.append("\n" + "="*70)
        output.append("‚ùì –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–ô –ö–í–ò–ó")
        output.append("="*70)

        for i, q in enumerate(result['quiz_questions'], 1):
            output.append(f"\n{'='*40}")
            output.append(f"–í–æ–ø—Ä–æ—Å {i}")
            output.append(f"{'='*40}")
            output.append(f"–¢–∏–ø: {q['question_type']}")
            output.append(f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {q['difficulty']}")
            output.append(f"\n{q['question_text']}")

            if q.get('options'):
                output.append("\n–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:")
                for opt in q['options']:
                    output.append(f"  {opt}")

            output.append(f"\n‚úì –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {q['correct_answer']}")
            output.append(f"üí° –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {q['explanation']}")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    output.append("\n" + "="*70)
    output.append("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    output.append("="*70)
    output.append(f"–§–∞–∫—Ç–æ–≤ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {len(result.get('key_facts', []))}")
    output.append(f"–í–æ–ø—Ä–æ—Å–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {len(result.get('quiz_questions', []))}")

    formatted_text = "\n".join(output)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON
    if output_file:
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump({
                'key_facts': result.get('key_facts', []),
                'quiz_questions': result.get('quiz_questions', []),
                'concepts': result.get('concepts', [])
            }, f, ensure_ascii=False, indent=2)
        logger.info(f"‚úì –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {output_file}")

    return formatted_text
