"""
–û–±—ë—Ä—Ç–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GigaChat —á–µ—Ä–µ–∑ LangChain —Å –ø–æ–¥—Å—á–µ—Ç–æ–º —Ç–æ–∫–µ–Ω–æ–≤
"""

from langchain_gigachat import GigaChat
from langchain_core.messages import HumanMessage
import os
import logging

logger = logging.getLogger(__name__)


# ============================================================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ô –¢–†–ï–ö–ï–† –¢–û–ö–ï–ù–û–í
# ============================================================================

class TokenUsageTracker:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤"""

    def __init__(self):
        self.prompt_tokens = 0
        self.completion_tokens = 0
        self.total_tokens = 0
        self.embedding_tokens = 0
        self.request_count = 0
        self.embedding_request_count = 0

    def add_usage(self, prompt: int, completion: int, total: int):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è LLM"""
        self.prompt_tokens += prompt
        self.completion_tokens += completion
        self.total_tokens += total
        self.request_count += 1

        logger.info(
            f"üìä LLM –∑–∞–ø—Ä–æ—Å #{self.request_count}: "
            f"prompt={prompt}, completion={completion}, total={total}"
        )

    def add_embedding_usage(self, tokens: int):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤"""
        self.embedding_tokens += tokens
        self.embedding_request_count += 1

        logger.info(
            f"üî¢ Embedding –∑–∞–ø—Ä–æ—Å #{self.embedding_request_count}: "
            f"tokens={tokens}"
        )

    def get_summary(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        return {
            'total_requests': self.request_count,
            'prompt_tokens': self.prompt_tokens,
            'completion_tokens': self.completion_tokens,
            'total_tokens': self.total_tokens,
            'embedding_tokens': self.embedding_tokens,
            'embedding_requests': self.embedding_request_count,
            'grand_total_tokens': self.total_tokens + self.embedding_tokens
        }

    def log_summary(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        logger.info("="*70)
        logger.info("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –¢–û–ö–ï–ù–û–í")
        logger.info("="*70)
        logger.info(f"LLM –∑–∞–ø—Ä–æ—Å–æ–≤: {self.request_count}")
        logger.info(f"  –¢–æ–∫–µ–Ω–æ–≤ –≤ –ø—Ä–æ–º–ø—Ç–∞—Ö: {self.prompt_tokens:,}")
        logger.info(f"  –¢–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–∞—Ö: {self.completion_tokens:,}")
        logger.info(f"  –í—Å–µ–≥–æ LLM —Ç–æ–∫–µ–Ω–æ–≤: {self.total_tokens:,}")
        logger.info("-"*70)
        logger.info(f"Embedding –∑–∞–ø—Ä–æ—Å–æ–≤: {self.embedding_request_count}")
        logger.info(f"  Embedding —Ç–æ–∫–µ–Ω–æ–≤: {self.embedding_tokens:,}")
        logger.info("-"*70)
        logger.info(f"–í–°–ï–ì–û –¢–û–ö–ï–ù–û–í: {self.total_tokens + self.embedding_tokens:,}")
        logger.info("="*70)


_global_token_tracker = TokenUsageTracker()


def get_global_token_tracker() -> TokenUsageTracker:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–∫–µ—Ä–∞ —Ç–æ–∫–µ–Ω–æ–≤"""
    return _global_token_tracker


# ============================================================================
# –ü–†–û–ö–°–ò –î–õ–Ø –ü–û–î–°–ß–ï–¢–ê –¢–û–ö–ï–ù–û–í
# ============================================================================

class GigaChatProxy:
    """–ü—Ä–æ–∫—Å–∏-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è GigaChat —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–¥—Å—á–µ—Ç–æ–º —Ç–æ–∫–µ–Ω–æ–≤"""

    def __init__(self, llm: GigaChat):
        self._llm = llm
        self._tracker = get_global_token_tracker()

    def invoke(self, messages, **kwargs):
        response = self._llm.invoke(messages, **kwargs)
        self._extract_and_log_tokens(response)
        return response

    def chat(self, message, **kwargs):
        if not isinstance(message, list):
            message = [message]
        return self.invoke(message, **kwargs)

    def _extract_and_log_tokens(self, response):
        try:
            prompt_tokens = 0
            completion_tokens = 0
            total_tokens = 0

            if hasattr(response, 'response_metadata'):
                metadata = response.response_metadata

                if 'token_usage' in metadata:
                    usage = metadata['token_usage']
                    prompt_tokens = usage.get('prompt_tokens', 0)
                    completion_tokens = usage.get('completion_tokens', 0)
                    total_tokens = usage.get('total_tokens', 0)
                elif 'usage_metadata' in metadata:
                    usage = metadata['usage_metadata']
                    prompt_tokens = usage.get('input_tokens', 0)
                    completion_tokens = usage.get('output_tokens', 0)
                    total_tokens = usage.get('total_tokens', 0)

            if total_tokens == 0 and (prompt_tokens > 0 or completion_tokens > 0):
                total_tokens = prompt_tokens + completion_tokens

            if total_tokens > 0:
                self._tracker.add_usage(prompt_tokens, completion_tokens, total_tokens)
            else:
                estimated = len(response.content.split()) * 1.3
                self._tracker.add_usage(0, int(estimated), int(estimated))

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤: {e}")

    def __getattr__(self, name):
        return getattr(self._llm, name)


# ============================================================================
# –ü–†–û–ö–°–ò –î–õ–Ø –≠–ú–ë–ï–î–î–ò–ù–ì–û–í –° –ü–û–î–°–ß–ï–¢–û–ú –¢–û–ö–ï–ù–û–í
# ============================================================================

class GigaChatEmbeddingsProxy:
    """–ü—Ä–æ–∫—Å–∏ –¥–ª—è GigaChatEmbeddings —Å –ø–æ–¥—Å—á–µ—Ç–æ–º —Ç–æ–∫–µ–Ω–æ–≤"""

    def __init__(self, embeddings):
        self._embeddings = embeddings
        self._tracker = get_global_token_tracker()

    def embed_documents(self, texts):
        """–ü—Ä–æ–∫—Å–∏ –¥–ª—è embed_documents —Å –ø–æ–¥—Å—á–µ—Ç–æ–º —Ç–æ–∫–µ–Ω–æ–≤"""
        result = self._embeddings.embed_documents(texts)

        total_text = ' '.join(texts)
        tokens = int(len(total_text.split()) * 1.3)
        self._tracker.add_embedding_usage(tokens)

        return result

    def embed_query(self, text):
        """–ü—Ä–æ–∫—Å–∏ –¥–ª—è embed_query —Å –ø–æ–¥—Å—á–µ—Ç–æ–º —Ç–æ–∫–µ–Ω–æ–≤"""
        result = self._embeddings.embed_query(text)

        tokens = int(len(text.split()) * 1.3)
        self._tracker.add_embedding_usage(tokens)

        return result

    def __call__(self, text):
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–µ–ª–∞–µ–º –ø—Ä–æ–∫—Å–∏ callable –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å FAISS
        FAISS –≤—ã–∑—ã–≤–∞–µ—Ç embedding_function(text) –Ω–∞–ø—Ä—è–º—É—é
        """
        return self.embed_query(text)

    def __getattr__(self, name):
        return getattr(self._embeddings, name)


# ============================================================================
# –§–£–ù–ö–¶–ò–ò –°–û–ó–î–ê–ù–ò–Ø –ö–õ–ò–ï–ù–¢–û–í
# ============================================================================

def create_gigachat_parser_client():
    """–°–æ–∑–¥–∞–Ω–∏–µ GigaChat –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è Parser Agent"""
    llm = GigaChat(
        credentials=os.getenv("GIGACHAT_CREDENTIALS"),
        verify_ssl_certs=False,
        scope=os.getenv("GIGACHAT_SCOPE", "GIGACHAT_API_PERS"),
    )
    return GigaChatProxy(llm)


def create_gigachat_quiz_client():
    """–°–æ–∑–¥–∞–Ω–∏–µ GigaChat –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è Quiz Agent"""
    llm = GigaChat(
        credentials=os.getenv("GIGACHAT_CREDENTIALS"),
        verify_ssl_certs=False,
        scope=os.getenv("GIGACHAT_SCOPE", "GIGACHAT_API_PERS"),
    )
    return GigaChatProxy(llm)


def create_gigachat_embeddings():
    """–°–æ–∑–¥–∞–Ω–∏–µ GigaChat —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ —Å –ø–æ–¥—Å—á–µ—Ç–æ–º —Ç–æ–∫–µ–Ω–æ–≤"""
    from langchain_community.embeddings import GigaChatEmbeddings

    embeddings = GigaChatEmbeddings(
        credentials=os.getenv("GIGACHAT_CREDENTIALS"),
        verify_ssl_certs=False,
        scope=os.getenv("GIGACHAT_SCOPE", "GIGACHAT_API_PERS")
    )

    return GigaChatEmbeddingsProxy(embeddings)
